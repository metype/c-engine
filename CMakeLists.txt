cmake_minimum_required(VERSION 3.26)
project(CEngine C)

set(CMAKE_C_STANDARD 23)
set(BUILD_SHARED_LIBS OFF)

file(GLOB_RECURSE SOURCES src/*.c)

set(SDL_VULKAN OFF)
set(LUAJIT_FORCE_UTF8_FOPEN ON)
set(LUAJIT_DIR "${CMAKE_SOURCE_DIR}/luajit")

add_executable(${PROJECT_NAME} ${SOURCES})
target_compile_definitions(${PROJECT_NAME} PUBLIC _AMD64_)

if(MSVC)
    set(CMAKE_ASM_COMPILE_OPTIONS_MSVC_RUNTIME_LIBRARY_MultiThreaded         "")
    set(CMAKE_ASM_COMPILE_OPTIONS_MSVC_RUNTIME_LIBRARY_MultiThreadedDLL      "")
    set(CMAKE_ASM_COMPILE_OPTIONS_MSVC_RUNTIME_LIBRARY_MultiThreadedDebug    "")
    set(CMAKE_ASM_COMPILE_OPTIONS_MSVC_RUNTIME_LIBRARY_MultiThreadedDebugDLL "")
    set(CMAKE_ASM_COMPILE_OPTIONS_MSVC_DEBUG_INFORMATION_FORMAT_Embedded "")
    set(CMAKE_ASM_COMPILE_OPTIONS_MSVC_DEBUG_INFORMATION_FORMAT_ProgramDatabase "")
    set(CMAKE_ASM_COMPILE_OPTIONS_MSVC_DEBUG_INFORMATION_FORMAT_EditAndContinue "")
    set(SDLIMAGE_AVIF OFF)
    set(SDLIMAGE_DAV1D OFF)
    enable_language(ASM_MASM)
    enable_language(ASM_NASM)
    enable_language(ASM)

    if(CMAKE_BUILD_TYPE STREQUAL "Debug")
        target_compile_options(${PROJECT_NAME} PUBLIC /Z7 /DEBUG)
        add_compile_definitions(CENGINE_DEBUG=1)
    else()
        target_compile_options(${PROJECT_NAME} PUBLIC /O2i /LTCG)
        add_compile_definitions(CENGINE_DEBUG=0)
    endif()
    target_compile_options(${PROJECT_NAME} PUBLIC /experimental:c11atomics /D__PtW32NoCatchWarn)
else()
    if(CMAKE_BUILD_TYPE STREQUAL "Debug")
        target_compile_options(${PROJECT_NAME} PUBLIC -g)
        add_compile_definitions(CENGINE_DEBUG=1)
    else()
        target_compile_options(${PROJECT_NAME} PUBLIC -O3 -flto)
        target_link_options(${PROJECT_NAME} PUBLIC -O3 -flto)
        add_compile_definitions(CENGINE_DEBUG=0)
    endif()

    target_compile_options(${PROJECT_NAME} PUBLIC -Wno-format-truncation)
    target_link_options(${PROJECT_NAME} PUBLIC -Wno-format-truncation)
endif()

add_subdirectory(SDL EXCLUDE_FROM_ALL)
add_subdirectory(SDL_Image EXCLUDE_FROM_ALL)
add_subdirectory(SDL_mixer EXCLUDE_FROM_ALL)
add_subdirectory(luajit-cmake EXCLUDE_FROM_ALL)

target_link_libraries(${PROJECT_NAME} PRIVATE SDL3::SDL3 SDL3_image::SDL3_image SDL3_mixer::SDL3_mixer luajit::lib luajit::header)

if(WIN32)
    message("Am on WIN32")
    add_definitions(-DHAVE_CONFIG_H)
    add_subdirectory(pthread-win32 EXCLUDE_FROM_ALL)
    target_link_libraries(${PROJECT_NAME} PRIVATE pthreads4w::pthreadVCE3)
else(NOT WIN32)
    message("Am on UNIX")
    target_link_libraries(${PROJECT_NAME} PRIVATE pthread m)
endif()